# This is a basic workflow to help you get started with Actions

name: deploy apps for QA

# Controls when the action will run. 
on:
  push:
    branches:
      - master
      - release/*
      - ni/test2
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-pre\+build\.[0-9]+'
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      tags:
        description: 'Build an app with a specific wrapper version'
        required: true
        default: 'Bluedot-React-Native-Plugin release'

# Some global environments to avoid duplicates
env:
  ANDROID_SIGNED_NAME: "app-release-signed.apk"
  ANDROID_RELEASE_DIR: "android/app/build/outputs/apk/release"
  ANDROID_SIGNED_PATH: "android/app/build/outputs/apk/release/app-release-signed.apk"

jobs:
  prepare-pre-release:
    runs-on: ubuntu-latest

    outputs:
      is_tag_build: ${{ steps.check-tag.outputs.is_tag_build }}
      semver: ${{ steps.semver.outputs.semver }}
      file_name: ${{ steps.artifact.outputs.file_name }}

    steps:
      # check whenever this is a build for tag whenever it's a downstream build or a manual build
      - name: Check Tag
        id: check-tag
        if: |
          contains(github.ref, '-pre+build.') ||
          contains(github.event.inputs.tag, '-pre+build.')
        run: |
          echo "::set-output name=is_tag_build::true"

      - name: set semver for downstream builds
        if: ${{ steps.check-tag.outputs.is_tag_build == 'true' }}
        id: semver
        run: |
          regex=".*(v(([0-9]+\.[0-9]+\.[0-9]+)-pre\+build.[0-9]+))"
          if [[ ${{ github.ref }} =~ $regex ]]; then
            echo "::set-output name=tag::${BASH_REMATCH[1]}"
            echo "::set-output name=semver::${BASH_REMATCH[2]}"
            echo "::set-output name=version::${BASH_REMATCH[3]}"
          elif [[ ${{ github.event.inputs.tags }} =~ $regex ]]; then
            echo "::set-output name=tag::${BASH_REMATCH[1]}"
            echo "::set-output name=semver::${BASH_REMATCH[2]}"
            echo "::set-output name=version::${BASH_REMATCH[3]}"
          fi
      
      - name: download pre-release wrapper
        if: ${{ steps.check-tag.outputs.is_tag_build == 'true' }}
        uses: i3h/download-release-asset@v1
        with:
          owner: Bluedot-Innovation
          repo: Bluedot-React-Native-Plugin
          tag: ${{ steps.semver.outputs.tag }}
          file: "bluedot-react-native-${{ steps.semver.outputs.version }}.tgz"

      - name: get pre-release artifact name
        if: ${{ steps.check-tag.outputs.is_tag_build == 'true' }}
        id: artifact
        run: |
          echo "::set-output name=file_name::$(ls | grep .tgz)"

      - name: upload temp build artifact
        if: ${{ steps.check-tag.outputs.is_tag_build == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: pre_release_wrapper
          path: ${{ steps.artifact.outputs.file_name }}
          retention-days: 1

  # This workflow contains a single job called "build"
  build-android-app:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs:
      - prepare-pre-release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # make sure that node installed
      - name: intall node
        uses: actions/setup-node@v2.1.5
      
      # restore react-native dependencies
      - name: npm cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
       
      - name: install npm dependencies
        run: |
          npm install

      - name: install react-native CLI
        run: |
          sudo npm install -g react-native-cli

      # download pre-release version of RN wrapper when this is a downstream build
      - name: download pre-release wrapper
        if: ${{ needs.prepare-pre-release.outputs.is_tag_build == 'true' }}
        uses: actions/download-artifact@v2
        with:
          name: pre_release_wrapper

      # install pre-release version of RN wrapper when this is a downstream build
      - name: install pre-release wrapper
        if: ${{ needs.prepare-pre-release.outputs.is_tag_build == 'true' }}
        run: |
          npm install ${{ needs.prepare-pre-release.outputs.file_name }}

      # update an app version to match SDK version when this is a downstream build
      - name: update version number
        if: ${{ needs.prepare-pre-release.outputs.is_tag_build == 'true' }}
        uses: damienaicheh/update-android-version-gradle-action@v1.0.0
        with:
          build-gradle-path: './android/build.gradle'
          version-code: ${{ github.run_number }}
          version-name: ${{ needs.prepare-pre-release.outputs.semver }}
          print-file: true

      # chache gradle files
      - name: cache gradle files
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: update AppCenter secret
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "{APP_SECRET_VALUE}"
          replace: ${{ secrets.APPCENTER_SECRET_ANDROID }}
          include: appcenter-config.json
                
      - name: build Android app
        run: |
          cd android
          ./gradlew assembleRelease
      
      - name: Sign Android release
        # ID used to access signed output path in next step
        id: sign_app 
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: ${{ env.ANDROID_RELEASE_DIR }}
          signingKeyBase64: ${{ secrets.ANDROID_RELEASE_KEYSTORE }}
          alias: ${{ secrets.ANDROID_RELEASE_KEYSTORE_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_RELEASE_KEYSTORE_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_RELEASE_KEYSTORE_KEY_PASSWORD }}
        env:
          # override default build-tools version (29.0.3) -- optional
          BUILD_TOOLS_VERSION: "30.0.2"

      # The sign_app step returns weird file name app-release-unsigned-signed.apk, rename it to a consistent and reusable name
      - name: rename signed file if needed
        if: ${{ steps.sign_app.outputs.signedReleaseFile != env.ANDROID_SIGNED_PATH }}
        run: mv ${{ steps.sign_app.outputs.signedReleaseFile }} ${{ env.ANDROID_SIGNED_PATH }}

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          # Artifact name
          name: Android
          path: ${{ env.ANDROID_SIGNED_PATH }}

  build-ios-app:
    runs-on: macos-latest
    needs:
      - prepare-pre-release

    steps:
      - uses: actions/checkout@v2
      
      # make sure that node installed
      - name: intall node
        uses: actions/setup-node@v2.1.5
      
      # restore react-native dependencies
      - name: npm cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: install npm dependencies
        run: |
          npm install

      - name: install react-native CLI
        run: |
          sudo npm install -g react-native-cli

      # download pre-release version of RN wrapper when this is a downstream build
      - name: download pre-release wrapper
        if: ${{ needs.prepare-pre-release.outputs.is_tag_build == 'true' }}
        uses: actions/download-artifact@v2
        with:
          name: pre_release_wrapper

      # install pre-release version of RN wrapper when this is a downstream build
      - name: install pre-release wrapper
        if: ${{ needs.prepare-pre-release.outputs.is_tag_build == 'true' }}
        run: |
          npm install ${{ needs.prepare-pre-release.outputs.file_name }}
      
      # update an app version to match SDK version when this is a downstream build
      - name: update version number 
        if: ${{ needs.prepare-pre-release.outputs.is_tag_build == 'true' }}
        uses: yanamura/ios-bump-version@v1
        with:
          version: ${{ needs.prepare-pre-release.outputs.semver }}
          build-number: ${{ github.run_number }}
          project-path: ios #Example for React Native project

      - name: cocoapods cache
        uses: actions/cache@v2
        with:
          path: ./ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: install cocoapods
        run: |
          npx pod-install

      # add SSH private key to checkout github git urls
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEVOPS_SSH_PRIVATE_KEY }}
          known_hosts: github.com
          if_key_exists: ignore

      - name: update AppCenter secret
        run: |
          sed -i '' "s/{APP_SECRET_VALUE}/${{ secrets.APPCENTER_SECRET_IOS }}/" ios/AppCenter-Config.plist
          cat ios/AppCenter-Config.plist

      - name: build iOS
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          cd ios
          fastlane build
        
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          # Artifact name
          name: iOS
          path: ios/RNPointSDKMinimalIntegration.ipa
          
     
       
 read-file-contents:
   runs-on: ubuntu-latest
      steps:
       - name: Checkout code
        uses: actions/checkout@v1

       - name: Read file contents
        id: read_file
        uses: andstor/file-reader-action@v1
        with:
          path: "ReleaseNotes.md"

      - name: File contents
        run: echo "${ steps.read_file.outputs.contents }"
        
  deploy-to-appcenter:
    runs-on: ubuntu-latest

    needs: [build-android-app, build-ios-app]

    steps:
      # Checks-out your repository to get release notes
      - uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2

      - name: upload Android app to App Center
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          appName: bluedot/BDReactNativeIntegration-1
          token: ${{ secrets.APPCENTER_TOKEN }}
          group: Collaborators
          file: Android/${{ env.ANDROID_SIGNED_NAME }}
          notifyTesters: true
          releaseNotes: ${{steps.read_file.outputs.contents}}
          debug: true

      - name: upload iOS app to App Center
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          appName: bluedot/BDReactNativeIntegration
          token: ${{ secrets.APPCENTER_TOKEN }}
          group: Collaborators
          file: iOS/RNPointSDKMinimalIntegration.ipa
          notifyTesters: true
          releaseNotes: ${{steps.read_file.outputs.contents}}
